{"ast":null,"code":"var _jsxFileName = \"C:\\\\KmtTelemetria\\\\ejemplobasico\\\\src\\\\LiveChart.js\";\nimport React from 'react';\nimport dotnetify from 'dotnetify';\nimport { LiveChartCss } from './css';\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\nimport 'chartjs-plugin-streaming';\nexport default class LiveChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Waveform: [],\n      Bar: [],\n      Pie: []\n    }; // Connect this component to the back-end view model.\n\n    this.vm = dotnetify.react.connect('LiveChartVM', this);\n  }\n\n  componentWillUnmount() {\n    this.vm.$destroy();\n  }\n\n  render() {\n    return React.createElement(LiveChartCss, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(LineChart, {\n      data: this.state.Waveform,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(PieChart, {\n      data: this.state.Pie,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(BarChart, {\n      data: this.state.Bar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartData = {\n      labels: [],\n      datasets: [{\n        label: 'Waveform',\n        data: [],\n        backgroundColor: 'rgba(217,237,245,0.4)',\n        borderColor: '#9acfea',\n        borderWidth: 2\n      }]\n    };\n    this.chartOptions = {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          type: 'realtime',\n          realtime: {\n            delay: 2000\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            suggestedMin: -1,\n            suggestedMax: 1\n          }\n        }]\n      }\n    };\n  }\n\n  shouldComponentUpdate() {\n    if (this.props.data.length > 0) {\n      const data = this.props.data[this.props.data.length - 1];\n      this.chartData.datasets[0].data.push({\n        x: Date.now(),\n        y: data[1]\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  render() {\n    const maxIdx = this.props.data.length - 1;\n    this.chartData.datasets[0].data = this.props.data.map((data, idx) => ({\n      x: Date.now() - (maxIdx - idx) * 1000,\n      y: data[1]\n    }));\n    return React.createElement(Line, {\n      data: this.chartData,\n      options: this.chartOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartData = {\n      labels: ['user', 'sys', 'eth0', 'lo', 'ker', 'sda1', 'sda2', 'sda3'],\n      datasets: [{\n        label: '',\n        data: [],\n        backgroundColor: ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)', 'rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)'],\n        borderColor: ['#9acfea'],\n        borderWidth: 1\n      }]\n    };\n    this.chartOptions = {\n      responsive: true,\n      legend: {\n        display: false\n      }\n    };\n  }\n\n  render() {\n    this.chartData.datasets[0].data = this.props.data;\n    return React.createElement(Bar, {\n      data: this.chartData,\n      options: this.chartOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass PieChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartData = {\n      labels: ['CPU', 'Memory', 'Disk'],\n      datasets: [{\n        label: '',\n        data: [],\n        backgroundColor: ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)'],\n        borderColor: ['#9acfea'],\n        borderWidth: 1\n      }]\n    };\n    this.chartOptions = {\n      responsive: true\n    };\n  }\n\n  render() {\n    this.chartData.datasets[0].data = this.props.data;\n    return React.createElement(Doughnut, {\n      data: this.chartData,\n      options: this.chartOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["C:\\KmtTelemetria\\ejemplobasico\\src\\LiveChart.js"],"names":["React","dotnetify","LiveChartCss","Line","Bar","Doughnut","LiveChart","Component","constructor","props","state","Waveform","Pie","vm","react","connect","componentWillUnmount","$destroy","render","LineChart","chartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","chartOptions","responsive","scales","xAxes","type","realtime","delay","yAxes","ticks","suggestedMin","suggestedMax","shouldComponentUpdate","length","push","x","Date","now","y","maxIdx","map","idx","BarChart","legend","display","PieChart"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport dotnetify from 'dotnetify';\r\nimport { LiveChartCss } from './css';\r\nimport { Line, Bar, Doughnut } from 'react-chartjs-2'; \r\nimport 'chartjs-plugin-streaming';\r\n\r\nexport default class LiveChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { Waveform: [], Bar: [], Pie: [] };\r\n\r\n    // Connect this component to the back-end view model.\r\n    this.vm = dotnetify.react.connect('LiveChartVM', this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.vm.$destroy();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <LiveChartCss>\r\n        <div>\r\n          <LineChart data={this.state.Waveform} />\r\n        </div>\r\n        <div>\r\n          <PieChart data={this.state.Pie} />\r\n          <BarChart data={this.state.Bar} />\r\n        </div>\r\n      </LiveChartCss>\r\n    );\r\n  }\r\n}\r\n\r\nclass LineChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.chartData = {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: 'Waveform',\r\n          data: [],\r\n          backgroundColor: 'rgba(217,237,245,0.4)',\r\n          borderColor: '#9acfea',\r\n          borderWidth: 2\r\n        }\r\n      ]\r\n    };\r\n    this.chartOptions = {\r\n      responsive: true,\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            type: 'realtime',\r\n            realtime: { delay: 2000 }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              suggestedMin: -1,\r\n              suggestedMax: 1\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  }\r\n  shouldComponentUpdate() {\r\n    if (this.props.data.length > 0) {\r\n      const data = this.props.data[this.props.data.length - 1];\r\n      this.chartData.datasets[0].data.push({ x: Date.now(), y: data[1] });\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  render() {\r\n    const maxIdx = this.props.data.length - 1;\r\n    this.chartData.datasets[0].data = this.props.data.map((data, idx) => ({ x: Date.now() - (maxIdx - idx) * 1000, y: data[1] }));\r\n    return (\r\n      <Line data={this.chartData} options={this.chartOptions} />\r\n    );\r\n  }\r\n}\r\n\r\nclass BarChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.chartData = {\r\n      labels: [ 'user', 'sys', 'eth0', 'lo', 'ker', 'sda1', 'sda2', 'sda3' ],\r\n      datasets: [\r\n        {\r\n          label: '',\r\n          data: [],\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.8)',\r\n            'rgba(54, 162, 235, 0.8)',\r\n            'rgba(255, 206, 86, 0.8)',\r\n            'rgba(75, 192, 192, 0.8)',\r\n            'rgba(153, 102, 255, 0.8)',\r\n            'rgba(255, 159, 64, 0.8)',\r\n            'rgba(255, 99, 132, 0.8)',\r\n            'rgba(54, 162, 235, 0.8)'\r\n          ],\r\n          borderColor: [ '#9acfea' ],\r\n          borderWidth: 1\r\n        }\r\n      ]\r\n    };\r\n    this.chartOptions = { responsive: true, legend: { display: false } };\r\n  }\r\n  render() {\r\n    this.chartData.datasets[0].data = this.props.data;\r\n    return (<Bar data={this.chartData} options={this.chartOptions} />);\r\n  }\r\n}\r\n\r\nclass PieChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.chartData = {\r\n      labels: [ 'CPU', 'Memory', 'Disk' ],\r\n      datasets: [\r\n        {\r\n          label: '',\r\n          data: [],\r\n          backgroundColor: [ 'rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)' ],\r\n          borderColor: [ '#9acfea' ],\r\n          borderWidth: 1\r\n        }\r\n      ]\r\n    };\r\n    this.chartOptions = { responsive: true };\r\n  }\r\n  render() {\r\n    this.chartData.datasets[0].data = this.props.data;\r\n    return (<Doughnut data={this.chartData} options={this.chartOptions} />);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}